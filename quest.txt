Je ne vois pas le boutton pour lancer ce programme:"import pygame as pg
import cv2
import numpy as np
import random
import math

pg.init()
pg.font.init()

class FireworkPixelArtEffect:
    def __init__(self, path='./Babe.png', pixel_size=3, scale=2):
        self.path = path
        self.PIXEL_SIZE = pixel_size
        self.SCALE = scale  # Facteur d'agrandissement
        self.image, self.gray_image = self.get_image()
        self.RES = self.WIDTH, self.HEIGHT = self.image.shape[1], self.image.shape[0]
        
        # Nouvelle résolution de la fenêtre
        self.SCALED_RES = (self.WIDTH * self.SCALE, self.HEIGHT * self.SCALE)
        self.surface = pg.display.set_mode(self.SCALED_RES)

        self.clock = pg.time.Clock()
        self.center = [self.WIDTH // 2, self.HEIGHT - 50]  # Point de départ du feu d'artifice
        self.phase = "propulsion"  # On démarre directement par la propulsion  
        self.start_time = pg.time.get_ticks()
        self.explosion_height = self.HEIGHT // 3  # La hauteur à laquelle l'effet doit avoir lieu
        self.gravity = 0.05
        self.explosion_time = None
        
        self.pixels = []
        for x in range(0, self.WIDTH, self.PIXEL_SIZE):
            for y in range(0, self.HEIGHT, self.PIXEL_SIZE):
                block = self.image[y:y+self.PIXEL_SIZE, x:x+self.PIXEL_SIZE]
                avg_color = np.mean(block, axis=(0, 1))
                color = tuple(map(int, avg_color))
                self.pixels.append({
                    'position': list(self.center),  # Commence au centre  
                    'final_position': (x, y),  # Objectif après effet
                    'color': color,
                    'velocity': [0, 0],
                    'size': random.randint(1, 2) * self.SCALE,  # Ajuster la taille des particules
                    'exploded': False,
                    'distance_to_travel': math.sqrt((x - self.center[0])**2 + (y - self.center[1])**2)  # Distance à parcourir
                })
    
    def get_image(self):
        self.cv2_image = cv2.imread(self.path)
        image = cv2.cvtColor(self.cv2_image, cv2.COLOR_BGR2RGB)
        return image, cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    
    def update_pixels(self):
        current_time = pg.time.get_ticks()
        
        if self.phase == "propulsion":
            # Augmenter la vitesse de propulsion
            if self.center[1] > self.explosion_height:
                self.center[1] -= 10  # Vitesse de propulsion augmentée

                # Déplace les pixels avec la propulsion
                for pixel in self.pixels:
                    if pixel['velocity'] == [0, 0]:  # Si la vitesse n'a pas été définie
                        # Appliquer une légère dispersion des pixels avant la propulsion
                        angle = random.uniform(0, 2 * math.pi)  # Angle totalement aléatoire
                        speed = random.uniform(4, 5)  # Vitesse aléatoire augmentée
                        pixel['velocity'] = [speed * math.cos(angle), speed * math.sin(angle)]
                    
                    # Déplacement des pixels avec le centre
                    pixel['position'][0] = self.center[0] + pixel['velocity'][0]  # Horizontalement, on ajoute la vitesse pour dispersion
                    pixel['position'][1] -= 10  # Verticalement, ils suivent le mouvement vers le haut

            else:
                self.phase = "final"  # Une fois la hauteur atteinte, les pixels se dispersent directement à leur place

        elif self.phase == "final":
            # Ajout d'une petite explosion pendant 3 secondes
            if self.explosion_time is None:
                self.explosion_time = current_time
            
            explosion_duration = 3000  # 3 secondes

            for pixel in self.pixels:
                # Ajout d'un léger effet d'explosion
                if current_time - self.explosion_time < explosion_duration:
                    pixel['position'][0] += random.uniform(-2, 2)  # Petite variation horizontale
                    pixel['position'][1] += random.uniform(-2, 2)  # Petite variation verticale
                
                # Interpolation des pixels vers leurs positions finales
                x, y = pixel['position']
                fx, fy = pixel['final_position']

                # Calcul de l'interpolation avec vitesse augmentée
                distance = math.sqrt((fx - x)**2 + (fy - y)**2)
                speed = distance / 30  # La vitesse est définie par la distance à parcourir, vitesse augmentée
                if distance > 1:
                    # Déplace progressivement vers la position finale
                    pixel['position'][0] += (fx - x) * speed / distance
                    pixel['position'][1] += (fy - y) * speed / distance
                else:
                    # Arrête le mouvement une fois que le pixel est assez proche de sa position finale
                    pixel['position'] = [fx, fy]

    def draw(self):
        self.surface.fill('black')

        if self.phase == "propulsion":
            pg.draw.circle(self.surface, (255, 255, 255), (self.center[0] * self.SCALE, self.center[1] * self.SCALE), 5 * self.SCALE)
        
        if self.phase != "final":  # Continue d'afficher les pixels pendant la propulsion
            for pixel in self.pixels:
                x, y = pixel['position']
                pg.draw.circle(self.surface, pixel['color'], (int(x * self.SCALE), int(y * self.SCALE)), pixel['size'])
        
        if self.phase == "final":  # Les pixels sont maintenant à leur place finale
            for pixel in self.pixels:
                x, y = pixel['position']
                pg.draw.circle(self.surface, pixel['color'], (int(x * self.SCALE), int(y * self.SCALE)), pixel['size'])

    def save_image(self):
        """Sauvegarde l'image affichée par pygame sous forme de fichier PNG"""
        pygame_image = pg.surfarray.array3d(pg.display.get_surface())  # Capturer l’écran
        pygame_image = np.transpose(pygame_image, (1, 0, 2))  # Corriger les axes
        cv2_img = cv2.cvtColor(pygame_image, cv2.COLOR_RGB2BGR)  # Convertir Pygame RGB → OpenCV BGR
        cv2.imwrite('./final_firework_image.png', cv2_img)
        print("Image sauvegardée sous 'final_firework_image.png'")

    def run(self):
        running = True
        while running:
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    running = False
                elif event.type == pg.KEYDOWN:
                    if event.key == pg.K_s:  # Sauvegarder l'image finale avec `S`
                        self.save_image()

            self.update_pixels()
            self.draw()
            pg.display.flip()

            # L'animation se termine mais on garde la fenêtre ouverte
            if self.phase == "final":  # On laisse l'affichage jusqu'à fermeture manuelle
                pass

            self.clock.tick(30)

        pg.quit()


if __name__ == '__main__':
    app = FireworkPixelArtEffect(path='./Babe.png', pixel_size=1, scale=2)  # Modifier 'scale' pour agrandir/réduire
    app.run()
" dans l'interface web ni l'interface de pygame. Voici la structure des mes fichiers :"aidan@aidan:~/Documents/Projects/Fireworks/pygame_web$ ls
db.sqlite3  game  manage.py  pygame_web
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web$ cd game/
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/game$ ls
admin.py  apps.py  __init__.py  migrations  models.py  __pycache__  static  templates  tests.py  urls.py  video_stream.py  views.py
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/game$ cd templates/
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/game/templates$ ls
index.html
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/game/templates$ cd ../migrations/
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/game/migrations$ ls
__init__.py  __pycache__
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/game/migrations$ cd ../../pygame_web/
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/pygame_web$ ls
asgi.py  __init__.py  __pycache__  settings.py  urls.py  wsgi.py
aidan@aidan:~/Documents/Projects/Fireworks/pygame_web/pygame_web$ 
". Voici mes fichiers : 'game/admin.py':"from django.contrib import admin

# Register your models here.
", 'game/apps.py':"from django.apps import AppConfig


class GameConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'game'
", 'game/models.py':"from django.db import models

# Create your models here.
", 'game/test.py':"from django.test import TestCase

# Create your tests here.
", 'game/urls.py':"from django.urls import path
from .views import index, video_feed

urlpatterns = [
    path('', index, name='index'),
    path('video_feed/', video_feed, name='video_feed'),  # Le "/" à la fin est important pour la cohérence
]
", 'video_stream.py':"import pygame as pg
import cv2
import numpy as np
import random
import math

class FireworkPixelArtEffect:
    def __init__(self, path='./game/static/Babe.png', pixel_size=3, scale=2):
        self.path = path
        self.PIXEL_SIZE = pixel_size
        self.SCALE = scale  
        self.image, self.gray_image = self.get_image()
        self.WIDTH, self.HEIGHT = self.image.shape[1], self.image.shape[0]
        self.SCALED_RES = (self.WIDTH * self.SCALE, self.HEIGHT * self.SCALE)
        self.surface = pg.Surface(self.SCALED_RES)  

        self.clock = pg.time.Clock()
        self.center = [self.WIDTH // 2, self.HEIGHT - 50]  
        self.phase = "propulsion"
        self.start_time = pg.time.get_ticks()
        self.explosion_height = self.HEIGHT // 3 
        self.gravity = 0.05
        self.explosion_time = None
        
        self.pixels = []
        for x in range(0, self.WIDTH, self.PIXEL_SIZE):
            for y in range(0, self.HEIGHT, self.PIXEL_SIZE):
                block = self.image[y:y+self.PIXEL_SIZE, x:x+self.PIXEL_SIZE]
                avg_color = np.mean(block, axis=(0, 1))
                color = tuple(map(int, avg_color))
                self.pixels.append({'position': list(self.center), 'final_position': (x, y), 'color': color})

    def get_image(self):
        cv2_image = cv2.imread(self.path)
        image = cv2.cvtColor(cv2_image, cv2.COLOR_BGR2RGB)
        return image, cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)

    def draw(self):
        self.surface.fill('black')
        for pixel in self.pixels:
            x, y = pixel['position']
            pg.draw.circle(self.surface, pixel['color'], (int(x * self.SCALE), int(y * self.SCALE)), 2)

    def get_frame(self):
        self.draw()
        frame = pg.surfarray.array3d(self.surface)
        frame = np.transpose(frame, (1, 0, 2))
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        return frame

def generate_frames():
    app = FireworkPixelArtEffect()
    while True:
        frame = app.get_frame()
        _, buffer = cv2.imencode('.jpg', frame)
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')", 'game/views.py':"from django.shortcuts import render
from django.http import StreamingHttpResponse
from .video_stream import generate_frames

def index(request):
    return render(request, 'index.html')

def video_feed(request):
    return StreamingHttpResponse(generate_frames(), content_type="multipart/x-mixed-replace; boundary=frame")", 'pygame_web/asgi.py':""""
ASGI config for pygame_web project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pygame_web.settings')

application = get_asgi_application()
", 'pygame_web/settings.py':""""
Django settings for pygame_web project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zj3$ecl0o+6^j+!5zi*9hb-)hg(7z0tcy1%@49%3h7l+jj(#x)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'game'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pygame_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pygame_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "game/static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
", 'pygame_web/urls.py':""""
URL configuration for pygame_web project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include  # Ajout de include pour inclure les URLs de l'application game

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('game.urls')),  # Inclure les URLs de l'application game
]


", 'pygame_web/wsgi.py':""""
WSGI config for pygame_web project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pygame_web.settings')

application = get_wsgi_application()
" et 'manage.py':"#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'pygame_web.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
". Rien ne marche 